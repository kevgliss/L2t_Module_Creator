#################################################################################################
#		Stock Log2time Template Module
#################################################################################################
# This script is a part of the log2timeline program.
# 
# Standard Format:
# Author: Generated by Module Creator
# Module Generator Version : 0.1
# 
# Copyright 2009-2011 Kristinn Gudjonsson (kristinn ( a t ) log2timeline (d o t) net)
#
#  This file is part of log2timeline.
#
#    log2timeline is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    log2timeline is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with log2timeline.  If not, see <http://www.gnu.org/licenses/>.

package Log2t::input::{{filename}};

use strict;
use Log2t::base::input; # the SUPER class or parent
use DateTime;		# to modify time stamp
use Log2t::Common ':binary';
use Log2t::BinRead;
use DateTime::Format::Strptime;

use vars qw($VERSION @ISA);

# inherit the base input module, or the super class.
@ISA = ( "Log2t::base::input" );

# version number
$VERSION = '0.1';

my %struct;

#       get_version
# A simple subroutine that returns the version number of the format file
# There shouldn't be any need to change this routine, it serves its purpose 
# just the way it is defined right now.
#
# @return A version number
sub get_version()
{
        return $VERSION;
}


# 	get_description
# A simple subroutine that returns a string containing a description of 
# the funcionality of the format file. This string is used when a list of
# all available format files is printed out
# @return A string containing a description of the format file's functionality
sub get_description()
{
	return "{{description}}";
}

#	get_time
# This is the main "juice" of the format file.  It takes a line from the log file
# and parses it to produce an array containing all the needed values to print a 
# body file.
#
# @param LINE a string containing a single line from the access file
# @return Returns a array containing the needed values to print a body file
sub get_time()
{
	my $self = shift;

	my %date;
	my $date_e;
	my $date_s;

	# the timestamp object
	my %t_line;

    
    # get the filehandle and read the next line
    my $fh = $self->{'file'};
    my $line = <$fh> or return undef;
	$line =~ s/\s+/ /g;

    my @fields = split('{{delim}}', $line);
    
    {% if dateTimeFormat %}
        my $datetimeStrp = new DateTime::Format::Strptime(pattern=>'{{dateTimeFormat}}');
        my $dt = $datetimeStrp->parse_datetime({{dateTimeIndex}});
        if(!($dt)){ return \%t_line; }
        # construct a hash of the date
        %date = (
            year	=>	$dt->year, 
            month	=>	$dt->month,
            day	    =>	$dt->day,
            hour	=>	$dt->hour,
            minute	=>	$dt->minute,
            time_zone => {{tz}},	# timezone is given in local timezone with the indication of how to get the GMT/UTC time from them
            second 	=> 	$dt->second
        );
    {% else %}
        my $dateStrp = new DateTime::Format::Strptime(pattern=>'{{dateFormat}}');
        my $dateObj = $dateStrp->parse_datetime({{dateIndex}});
        if(!($dateObj)){ return \%t_line; }
        my $timeStrp = new DateTime::Format::Strptime(pattern=>'{{timeFormat}}');
        my $timeObj = $timeStrp->parse_datetime({{timeIndex}});
        if(!($timeObj)){ return \%t_line; }
        %date = (
            year	=>	$dateObj->year, 
            month	=>	$dateObj->month,
            day	    =>	$dateObj->day,
            hour	=>	$timeObj->hour,
            minute	=>	$timeObj->minute,
            time_zone => {{tz}},	# timezone is given in local timezone with the indication of how to get the GMT/UTC time from them
            second 	=> 	$timeObj->second
        );
    {% endif %}
    

    my $date_s = DateTime->new( \%date );
    my $date_e = $date_s->epoch;		

    # create the t_line variable
    %t_line = (
            'time' => { 0 => { 'value' => $date_e, 'type' => 'Entry written', 'legacy' => 15 } },
            'desc' => {{desc}},
            'short' => {{short}},
            'notes' => {{notes}},
            'source' => '{{source}}',
            'sourcetype' => '{{sourceType}}',
            'version' => 1,
            'extra' => {}
    );

	return \%t_line;
}

#	get_help
# A simple subroutine that returns a string containing the help 
# message for this particular format file.
# @return A string containing a help file for this format file
sub get_help()
{
	return "This parser parses the BlueCoat Proxy log file. To see the definition of the 
log format, please see:

This format file depends upon the library
	DateTime
for converting date variables to epoch time. Possible to install using
perl -MCPAN -e shell
(when loaded)
install DateTime\n";

}

#	verify
# A subroutine that reads a single line from the log file and verifies that it is of the
# correct format so it can be further processed.
# L2t Module Creator currently has no ability to verify data sources. It is assumed that these 
# modules are used against data that they are supposed to parse.

sub verify
{
	my %return;
    $return{'success'} = 1;
	return \%return;
}

1;

__END__

=pod

=head1 NAME

B<structure> - an input module B<log2timeline> that parses X

=head1 DESCRIPTION

An input module

=head1 SUBROUTINES

=over 4

=item new
=item init
=item end
=item get_time()
=item verify( $log_file ) 

This subroutine takes an argument the file name to be pares (file/dir/artifact) and verififies it's structure to determine if it is really of the correct format.

This is needed since there is no need to try to parse the file/directory/artifact if the input module is unable to parse it(not designed to parse it)

This subroutine returns a reference to a hash that contains two values 
	success An integer indicating whether or not the input module is able to parse the file/directory/artifact
	msg	A message indicating the reason why the input module was not able to parse the file/directory/artifact

=item get_help()

A simple subroutine that returns a string containing the help message for this particular input module. This also contains a longer description of the input module decribing each parameter that can be passed to the subroutine. It sometimes contains a list of all dependecies and possibly some instruction on how to install them on the system to make it easier to implement the input module. 

=item get_version()

Return the version number of the input module

=item get_description()

Returns a string that contains a short description of the functionality of the input module. When a list of of all available input modules is printed using B<log2timeline> this string is used. So this string should be very short and decriptive, mostly to say which type of log file/artifact/directory this input module is designed to parse.

=back

=head1 AUTHOR

Kristinn Gudjonsson <kristinn (a t) log2timeline ( d o t ) net> is the orginial author of this program.

=head1 COPYRIGHT

The tool is released under GLP so anyone cna contribute to the tool. Copyright 2011.

=cut
